data {

  int<lower=0> nVertices;
  int<lower=0> nEdges;
  int<lower=0> edgeEndPoints1[nEdges];
  int<lower=0> edgeEndPoints2[nEdges];
  real diag;
  real offDiag;
  
  @if{options.hasLikelihood()}
  int<lower=0> @{stanObservedVariableName()}[nVertices];
  @end{}

}

parameters {

  vector[nVertices] @{stanLatentVariableName()};
  
}

model {

  matrix[2,2] localPrecision;
  vector[2] zeroes;
  vector[2] temp;
  
  localPrecision[1,1] <- diag;
  localPrecision[2,2] <- diag;
  localPrecision[1,2] <- offDiag;
  localPrecision[2,1] <- offDiag;
  
  zeroes[1] <- 0;
  zeroes[2] <- 0;

  for (factorIndex in 1:nEdges) {
  
    temp[1] <- @{stanLatentVariableName()}[edgeEndPoints1[factorIndex]+1];
    temp[2] <- @{stanLatentVariableName()}[edgeEndPoints2[factorIndex]+1];
    
    increment_log_prob(multi_normal_prec_log(temp, zeroes, localPrecision));
  
  }
  
  @if{options.hasLikelihood()}
  for (nodeIndex in 1:nVertices) {
    
    increment_log_prob(poisson_log(@{stanObservedVariableName()}[nodeIndex], exp(@{stanLatentVariableName()}[nodeIndex])));
    
  }
  @end{}

}